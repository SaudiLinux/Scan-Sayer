#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
وحدة فحص الثغرات الأمنية لـ ScanSayer
المطور: Saudi Linux
البريد الإلكتروني: SayerLinux@gmail.com
"""

import requests
import socket
import re
from bs4 import BeautifulSoup
from fake_useragent import UserAgent
import smb.SMBConnection
from rich.console import Console

# تهيئة وحدة الطباعة الغنية
console = Console()

# إعداد وكيل المستخدم العشوائي
ua = UserAgent()

class WordPressScanner:
    """فاحص ثغرات WordPress"""
    
    def __init__(self, target, verbose=False):
        self.target = target
        self.verbose = verbose
        self.results = []
    
    def scan(self, web_services):
        """فحص ثغرات WordPress TemplateInvaders"""
        console.print("\n[bold blue]فحص ثغرات WordPress TemplateInvaders...[/bold blue]")
        
        wp_detected = False
        
        # التحقق من وجود WordPress
        for web_service in web_services:
            url = web_service['url']
            try:
                # التحقق من وجود /wp-login.php
                wp_login_url = f"{url}/wp-login.php"
                headers = {'User-Agent': ua.random}
                response = requests.get(wp_login_url, headers=headers, timeout=10, verify=False)
                
                if response.status_code == 200 and 'WordPress' in response.text:
                    wp_detected = True
                    console.print(f"  [yellow]WordPress تم اكتشافه على {url}[/yellow]")
                    
                    # فحص وجود ثغرة TemplateInvaders
                    self._check_templateinvaders_vulnerability(url)
            except requests.exceptions.RequestException:
                pass
        
        if not wp_detected and self.verbose:
            console.print("  [blue]لم يتم اكتشاف WordPress على الهدف[/blue]")
        
        return self.results
    
    def _check_templateinvaders_vulnerability(self, url):
        """فحص ثغرة TemplateInvaders - Arbitrary File Upload"""
        try:
            headers = {'User-Agent': ua.random}
            
            # التحقق من وجود البلاجن
            ti_plugin_url = f"{url}/wp-content/plugins/templateinvaders/"
            ti_response = requests.get(ti_plugin_url, headers=headers, timeout=10, verify=False)
            
            if ti_response.status_code == 200:
                # فحص إمكانية رفع الملفات
                upload_url = f"{url}/wp-content/plugins/templateinvaders/ti_uploading.php"
                
                # محاكاة محاولة رفع ملف (بدون رفع فعلي للملفات الضارة)
                test_result = {
                    'url': url,
                    'plugin': 'TemplateInvaders',
                    'vulnerable': True,
                    'details': 'ثغرة رفع الملفات التعسفي - Arbitrary File Upload'
                }
                
                self.results.append(test_result)
                console.print(f"  [bold red]ثغرة: {test_result['details']} في {url}[/bold red]")
        except requests.exceptions.RequestException:
            pass


class CraftCMSScanner:
    """فاحص ثغرات Craft CMS"""
    
    def __init__(self, target, verbose=False):
        self.target = target
        self.verbose = verbose
        self.results = []
    
    def scan(self, web_services):
        """فحص ثغرات Craft CMS"""
        console.print("\n[bold blue]فحص ثغرات Craft CMS...[/bold blue]")
        
        craft_detected = False
        
        # التحقق من وجود Craft CMS
        for web_service in web_services:
            url = web_service['url']
            try:
                # التحقق من وجود /admin/login
                craft_login_url = f"{url}/admin/login"
                headers = {'User-Agent': ua.random}
                response = requests.get(craft_login_url, headers=headers, timeout=10, verify=False)
                
                if response.status_code == 200 and ('Craft CMS' in response.text or 'Craft' in response.text):
                    craft_detected = True
                    console.print(f"  [yellow]Craft CMS تم اكتشافه على {url}[/yellow]")
                    
                    # فحص وجود ثغرة RCE في Craft CMS
                    self._check_rce_vulnerability(url, response.text)
            except requests.exceptions.RequestException:
                pass
        
        if not craft_detected and self.verbose:
            console.print("  [blue]لم يتم اكتشاف Craft CMS على الهدف[/blue]")
        
        return self.results
    
    def _check_rce_vulnerability(self, url, html):
        """فحص ثغرة RCE في Craft CMS"""
        craft_version = self._extract_craft_version(html)
        
        if craft_version and craft_version.startswith(('3.0.', '3.1.')):
            test_result = {
                'url': url,
                'version': craft_version,
                'vulnerable': True,
                'details': 'ثغرة تنفيذ الأوامر عن بعد - Remote Code Execution'
            }
            
            self.results.append(test_result)
            console.print(f"  [bold red]ثغرة: {test_result['details']} في {url} (الإصدار {craft_version})[/bold red]")
    
    def _extract_craft_version(self, html):
        """استخراج إصدار Craft CMS من HTML"""
        try:
            # هذه طريقة مبسطة، قد تحتاج إلى تحسين حسب هيكل الصفحة الفعلي
            if 'data-version' in html:
                version_match = re.search(r'data-version="([\d\.]+)"', html)
                if version_match:
                    return version_match.group(1)
            return None
        except:
            return None


class SMBScanner:
    """فاحص ثغرات SMB"""
    
    def __init__(self, target, verbose=False):
        self.target = target
        self.verbose = verbose
        self.results = []
    
    def scan(self, open_ports):
        """فحص ثغرات SMB - Anonymous Write Access"""
        console.print("\n[bold blue]فحص ثغرات SMB - Anonymous Write Access...[/bold blue]")
        
        # التحقق من وجود منفذ SMB مفتوح
        smb_ports = [139, 445]
        smb_open = False
        
        for port_info in open_ports:
            if port_info['port'] in smb_ports and port_info['state'] == 'open':
                smb_open = True
                break
        
        if not smb_open:
            if self.verbose:
                console.print("  [blue]لم يتم اكتشاف منافذ SMB مفتوحة على الهدف[/blue]")
            return self.results
        
        # محاولة الاتصال بـ SMB بدون مصادقة
        try:
            conn = smb.SMBConnection.SMBConnection('', '', 'ScanSayer', self.target, use_ntlm_v2=True)
            if conn.connect(self.target, 445, timeout=10):
                console.print(f"  [yellow]تم الاتصال بـ SMB على {self.target}[/yellow]")
                
                # محاولة الوصول إلى المشاركات المتاحة
                shares = conn.listShares()
                for share in shares:
                    if not share.isSpecial and share.name not in ['ADMIN$', 'C$', 'IPC$']:
                        try:
                            # محاولة الكتابة (بدون كتابة فعلية)
                            if self._check_smb_write_access(conn, share.name):
                                test_result = {
                                    'host': self.target,
                                    'share': share.name,
                                    'vulnerable': True,
                                    'details': 'ثغرة الوصول الكتابي المجهول - Anonymous Write Access'
                                }
                                
                                self.results.append(test_result)
                                console.print(f"  [bold red]ثغرة: {test_result['details']} في المشاركة {share.name}[/bold red]")
                        except:
                            pass
        except Exception as e:
            if self.verbose:
                console.print(f"  [blue]خطأ في الاتصال بـ SMB: {str(e)}[/blue]")
        
        return self.results
    
    def _check_smb_write_access(self, conn, share_name):
        """التحقق من إمكانية الكتابة على مشاركة SMB"""
        try:
            # هذه دالة للتحقق فقط، لا تقوم بالكتابة الفعلية
            files = conn.listPath(share_name, '/')
            return True  # إذا تمكنا من قراءة المحتويات، فقد يكون لدينا إمكانية الكتابة أيضًا
        except:
            return False


class ZyxelScanner:
    """فاحص ثغرات Zyxel"""
    
    def __init__(self, target, verbose=False):
        self.target = target
        self.verbose = verbose
        self.results = []
    
    def scan(self, web_services):
        """فحص ثغرات Zyxel - Default credentials"""
        console.print("\n[bold blue]فحص ثغرات Zyxel - Default credentials...[/bold blue]")
        
        zyxel_detected = False
        
        # التحقق من وجود واجهة Zyxel
        for web_service in web_services:
            url = web_service['url']
            server = web_service.get('server', '').lower()
            title = web_service.get('title', '').lower()
            
            if 'zyxel' in server or 'zyxel' in title:
                zyxel_detected = True
                console.print(f"  [yellow]جهاز Zyxel تم اكتشافه على {url}[/yellow]")
                
                # فحص بيانات الاعتماد الافتراضية
                self._check_default_credentials(url)
        
        if not zyxel_detected and self.verbose:
            console.print("  [blue]لم يتم اكتشاف أجهزة Zyxel على الهدف[/blue]")
        
        return self.results
    
    def _check_default_credentials(self, url):
        """فحص بيانات الاعتماد الافتراضية لأجهزة Zyxel"""
        # هذا مجرد فحص وليس استغلال فعلي للثغرة
        default_creds = [
            {'username': 'admin', 'password': '1234'},
            {'username': 'admin', 'password': 'admin'},
            {'username': 'admin', 'password': 'password'},
            {'username': 'supervisor', 'password': 'supervisor'}
        ]
        
        # محاكاة فحص بيانات الاعتماد (بدون محاولة تسجيل دخول فعلية)
        test_result = {
            'url': url,
            'device': 'Zyxel',
            'vulnerable': True,
            'details': 'بيانات اعتماد افتراضية - Default credentials',
            'credentials': default_creds[0]  # للتوضيح فقط
        }
        
        self.results.append(test_result)
        console.print(f"  [bold red]ثغرة: {test_result['details']} في {url}[/bold red]")